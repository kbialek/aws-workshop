AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  DeploymentBucket:
    Type: String

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  RouteTableInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1a

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-central-1b

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetANatGatewayElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnetANatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetANatGatewayElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  RouteTableNatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnetANatGateway

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.8.0/24
      AvailabilityZone: eu-central-1a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.9.0/24
      AvailabilityZone: eu-central-1b

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH access from all IPs
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP access from all IPs
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  DatabaseClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows connectivity to MySQL databases
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  DatabaseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows network access to the database
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref DatabaseClientSecurityGroup

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DeploymentBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/*
        - PolicyName: DatabaseSecretAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref DatabaseAppSecret

  Ec2InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-00a205cb8e06c3c4e
        SecurityGroupIds:
          - !Ref SshSecurityGroup
          - !Ref DatabaseClientSecurityGroup
        KeyName: !Ref KeyPair
        IamInstanceProfile:
          Name: !Ref Ec2InstanceInstanceProfile
        Monitoring:
          Enabled: true # Enable detailed monitoring
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource EC2LaunchTemplate \
              --configsets install \
              --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install: [ installCloudwatchAgent, installApp ]
        installCloudwatchAgent:
          packages:
            yum:
              amazon-cloudwatch-agent: [ ]
          files:
            /etc/cloudwatch-agent-config.json:
              content: !Sub |
                {
                        "agent": {
                                "metrics_collection_interval": 60
                        },
                        "logs": {
                                "logs_collected": {
                                        "files": {
                                                "collect_list": [
                                                        {
                                                                "file_path": "/var/log/demo-app.log",
                                                                "log_group_name": "${AWS::StackName}/application",
                                                                "log_stream_name": "{instance_id}"
                                                        }
                                                ]
                                        }
                                }
                        },
                        "metrics": {
                                "namespace": "MyApp",
                                "append_dimensions": {
                                        "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                                        "InstanceId": "${!aws:InstanceId}"
                                },
                                "aggregation_dimensions": [["AutoScalingGroupName"]],
                                "metrics_collected": {
                                        "mem": {
                                                "measurement": [
                                                        "mem_used_percent"
                                                ],
                                                "metrics_collection_interval": 60
                                        },
                                        "statsd":{
                                               "service_address":":8125",
                                               "metrics_collection_interval":60,
                                               "metrics_aggregation_interval":300
                                        }
                                }
                        }
                }
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            start-agent:
              command: "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/etc/cloudwatch-agent-config.json"
        installApp:
          packages:
            yum:
              python3: [ ]
              jq: [ ]
          files:
            /opt/install_app.sh:
              content: !Sub |
                #!/bin/bash -xe

                # Download and extract application package
                mkdir /opt/demo-app
                aws s3 cp s3://${DeploymentBucket}/demo-app.zip /tmp
                unzip -x /tmp/demo-app.zip -d /opt/demo-app

                # Install dependencies
                cd /opt/demo-app
                pip3 install -r requirements.txt

                # Start the application
                chmod +x run.sh
                systemctl daemon-reload
                systemctl enable demo-app.service
                systemctl start demo-app.service
              mode: "000755"
              owner: "root"
              group: "root"
            /etc/systemd/system/demo-app.service:
              content: |
                [Unit]
                Description=Demo App

                [Service]
                WorkingDirectory=/opt/demo-app
                ExecStart=/opt/demo-app/run.sh
                Restart=on-failure

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: "root"
              group: "root"
            /opt/env.sh:
              content: !Sub |
                export $(aws secretsmanager get-secret-value \
                  --region ${AWS::Region} \
                  --secret-id ${DatabaseAppSecret} \
                  --query "SecretString" \
                  --output text \
                  | jq -r '"DB_HOST=\(.host) DB_USER=\(.username) DB_PASSWORD=\(.password)"')
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            install-app:
              command: "/opt/install_app.sh"

  Ec2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGateway
    Properties:
      MinSize: 2
      MaxSize: 4
      Cooldown: 10 # So short for demo purposes only
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MetricsCollection:
        - Granularity: 1Minute


  Ec2MemHighUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Checks if EC2 mem usage is exceeding 80%
      Namespace: MyApp
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref Ec2AutoScalingGroup
      MetricName: mem_used_percent
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      Unit: Percent
      EvaluationPeriods: 1
      Period: 60
      Statistic: Maximum

  Ec2AutoScalingGroupScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref Ec2AutoScalingGroup
      PolicyType: TargetTrackingScaling
      AdjustmentType: ChangeInCapacity
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DemoApp database subnet group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  Database:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Sub ${AWS::StackName}-db
      DBInstanceClass: db.t2.micro
      Engine: mysql
      AllocatedStorage: 5
      StorageType: gp2
      MultiAZ: true
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ] ]
      VPCSecurityGroups:
        - !Ref DatabaseServerSecurityGroup

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-db-sa-secret"
      GenerateSecretString:
        SecretStringTemplate: '{"username":"sa"}'
        PasswordLength: 24
        GenerateStringKey: "password"
        ExcludeCharacters: '''"@/\'

  DatabaseSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseSecret
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBInstance

  DatabaseAppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-db-app-secret"
      GenerateSecretString:
        SecretStringTemplate: '{"username":"demo_app"}'
        PasswordLength: 24
        GenerateStringKey: "password"
        ExcludeCharacters: '''"@/\'

  DatabaseAppSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseAppSecret
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBInstance

  DatabaseSchemaInitLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AllowCloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AllowDeploymentBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/*
        - PolicyName: AllowSecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DatabaseSecret
                  - !Ref DatabaseAppSecret
        - PolicyName: AllowVPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"


  LambdaDefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows all outbound traffic
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSchemaInitLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - InternetGatewayAttachment
      - RouteTableInternetGatewayRoute
      - RouteTableNatGatewayRoute
      - PublicSubnetARouteTableAssociation
      - PublicSubnetBRouteTableAssociation
      - PrivateSubnetARouteTableAssociation
      - PrivateSubnetBRouteTableAssociation
    Properties:
      Description: Initializes Database for demo application
      Runtime: python3.8
      Role: !GetAtt DatabaseSchemaInitLambdaExecutionRole.Arn
      Handler: init_db.lambda_handler
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        SecurityGroupIds:
          - !Ref DatabaseClientSecurityGroup
          - !Ref LambdaDefaultSecurityGroup
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/init_db.zip

  DatabaseSchemaInitCustomResource:
    Type: "Custom::DatabaseSchemaInit"
    DependsOn: Database
    Properties:
      ServiceToken: !GetAtt DatabaseSchemaInitLambda.Arn
      AwsRegion: !Ref AWS::Region
      SaSecretName: !Ref DatabaseSecret
      AppSecretName: !Ref DatabaseAppSecret


Outputs:
  AsgName:
    Value: !Ref Ec2AutoScalingGroup
